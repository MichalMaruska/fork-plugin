* avoid allocating memory
** keep the queus fixed-sized.... events not allocated.
**




* libinput

evdev_process_event



* use std::format

* mouse signal
schedule if locked.


surrogate template


* fmt_event  drop or ?

* rename  Time -> time_t
/usr/include/X11/X.h
typedef CARD32 Time;


#if DDX_REPEATS_KEYS || 1


* key_event   key_event_wrapper
depends on template

** build with clang ?
done

* reinterpret_cast ?


** done: gcov

lcov generate html?
lcov --capture --directory . --output-file coverage.info
genhtml coverage.info --output-directory out

*** irrelevant:
ai extra-cmake-modules
ai cmake-extras

* alternative,  coverage.cmake could be TOOLCHAIN file?
https://www.youtube.com/watch?v=VFgvNsyTikg
ai gcovr
gcovr --root .. -j 10 --html-details -o html .
--exclude-throw-branches --exclude-unreachable-branches

* clean up Cmake ?
https://github.com/ninja-build/ninja/issues/174

install ...


use sanitizers?

* key -> reset machine (no active forks) -> make forkActive private!


* move into machine.h

* queue?
I want to pop only unique_ptr


why do I have to invoke inside template the other methods with this->method ?
why not method ?


*
enum twin_relationship {
    total_limit = fork_configure_total_limit,
    overlap_limit = fork_configure_overlap_limit,
};



* use <chrono>

src/config.h  printf format PRIu32

* split fork_archived_events.h
--- enums -- requests fork_configure_last_events, ....
archived_event should be platform agnostic.

archived_event base class.
derived would be x_archived_event

virtual archived_event archive_event(const key_event& event) = 0;
should just searialize
virtual serialize_event(archived_event& archive, const PlatformEvent *pevent)




* install with correct path!

* ignore (on laptop) AR of 246.



* todo: activate tracing/debugging of other parts of X.
  and also here! make more levels



* left vs right hand

apa   vs  "


* time slot in the machine object


* uSE -> u {s-modifier}-e
special timing ??



* code:
**  todo:  "%lu" on 32bit!
#define TIME_FMT  ""



** make the machine a C++ object (class). with its methods?

** I need a semi-assert: assert, or just print warning.


** we should store the info on the really pressed keycode
   ... i.e. send a RawPress event


** fixme:  When we change the VT, we should release all forked stuff!
   Simply push e EOF event.


** all functions should be *.so local (static), accessible only via
   slots in exported structure!

** possible bug:
   time 0 could be a valid time?
   CurrentTime is 0.

   timeouts (per key, or global) must not be changed while we use them.



** performance enhancement:
   the 0 config could  be just  a NULL pointer. It consumes too much memory, maybe! */

** mouse stuff is run in a signal handler!
   any entry in here must  start w/  machine->lock = 1; and end w/ machine->lock = 0;

   bug: mouse (FORCE) vs replaying ..... un freeze  & reconfig i should replay even
   output_queue!




** How to check at compile time? that a #define is string (not number)?
  gcc -DVERSION 1     ... how to have it "1" ?
